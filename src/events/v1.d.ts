/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all events
         * @description Retrieves a list of all events
         */
        get: {
            parameters: {
                query?: {
                    /** @description Cursor of where to start from */
                    cursor?: string;
                    /** @description Max amount of events to fetch */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of events. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data: components["schemas"]["Event"][];
                            cursor?: string;
                            hasNextPage: boolean;
                        };
                    };
                };
                /** @description Bad request. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unknown server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create a new event
         * @description Admin endpoint to create a new event
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Event to be created */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
            responses: {
                /** @description The created event. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Event"];
                    };
                };
                /** @description Bad request. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unknown server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an event
         * @description Get one event by id
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the event */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description The event */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Event"];
                    };
                };
                /** @description Bad request. */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Event not found. */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unknown server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/registration": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sign up for an event
         * @description Sign up for an event
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID of the event */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Registration to be created */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["Registration"];
                };
            };
            responses: {
                /** @description The created registration. */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Registration"];
                    };
                };
                /** @description Unknown server error. */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Event: {
            /** Format: uuid */
            readonly id: string;
            name: string;
            location: components["schemas"]["Location"];
            /** Format: date-time */
            startTime: string;
            /** Format: date-time */
            endTime: string;
            /** Format: date-time */
            registrationCloseTime: string;
            registrationTypes: components["schemas"]["RegistrationType"][];
            allowedTeamSizeRange: components["schemas"]["Range"];
            signUpStats: components["schemas"]["SignUpStats"];
        };
        SignUpStats: {
            readonly numTeams: number;
            readonly numRosteredPlayers: number;
            readonly numTotalPlayers: number;
        };
        Registration: components["schemas"]["IndividualRegistration"] | components["schemas"]["TeamRegistration"];
        IndividualRegistration: {
            /** Format: uuid */
            readonly id: string;
            /** Format: uuid */
            readonly eventId: string;
            /** Format: date-time */
            readonly registeredAt: string;
            /** Format: email */
            email: string;
            homeCity: string;
            playerInfo: components["schemas"]["PlayerInfo"];
            experience: components["schemas"]["ExperienceLevel"];
            readonly paid: boolean;
        };
        TeamRegistration: {
            /** Format: uuid */
            readonly id: string;
            /** Format: uuid */
            readonly eventId: string;
            /** Format: date-time */
            readonly registeredAt: string;
            teamName: string;
            homeCity: string;
            /** Format: email */
            captainEmail: string;
            players: components["schemas"]["PlayerInfo"][];
            readonly paid: boolean;
        };
        PlayerInfo: {
            firstName: string;
            lastName: string;
        };
        Location: {
            name: string;
            address: components["schemas"]["Address"];
        };
        Address: {
            /** @description Street address */
            street: string;
            /** @description City or town */
            city: string;
            /** @description State or province */
            state: string;
            /** @description Postal code */
            postalCode: string;
            /** @description Country */
            country: string;
        };
        Range: {
            min: number;
            max: number;
        };
        /** @enum {string} */
        RegistrationType: "ByIndividual" | "ByTeam";
        /** @enum {string} */
        ExperienceLevel: "Novice" | "Intermediate" | "Advanced";
        /** @enum {string} */
        ErrorCode: "InternalError" | "LimitOutOfBounds" | "InvalidCursor" | "NotFound" | "EmptyBody";
        Error: {
            code: components["schemas"]["ErrorCode"];
            message: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
